syntax = "proto3";


option go_package = "./;deliverprotocol";

message Error {
  uint32 code = 1;
  string message = 2;
}

message Command {
  uint32 id = 1;
  reserved 2, 3;
  ConnectRequest connect = 4;
  SubscribeRequest subscribe = 5;
  UnsubscribeRequest unsubscribe = 6;
  PublishRequest publish = 7;
  PresenceRequest presence = 8;
  PresenceStatsRequest presence_stats = 9;
  PingRequest ping = 10;
  SendRequest send = 11;
  RefreshRequest refresh = 12;
  SubRefreshRequest sub_refresh = 13;
}

message Reply {
  uint32 id = 1;
  Error error = 2;
  reserved 3;
  Push push = 4;
  ConnectResult connect = 5;
  SubscribeResult subscribe = 6;
  UnsubscribeResult unsubscribe = 7;
  PublishResult publish = 8;
  PresenceResult presence = 9;
  PresenceStatsResult presence_stats = 10;
  PingResult ping = 12;
  RefreshResult refresh = 14;
  SubRefreshResult sub_refresh = 15;
}

// Push can be sent to a client as part of Reply in case of bidirectional transport or
// without additional wrapping in case of unidirectional transports.
// ProtocolVersion2 uses channel and one of the possible concrete push messages.
message Push {
  reserved 1, 3;
  string channel = 2;
  Publication pub = 4;
  Join join = 5;
  Leave leave = 6;
  Unsubscribe unsubscribe = 7;
  Message message = 8;
  Subscribe subscribe = 9;
  Connect connect = 10;
  Disconnect disconnect = 11;
  Refresh refresh = 12;
}

message ClientInfo {
  string user = 1;
  string client = 2;
  bytes conn_info = 3;
  bytes chan_info = 4;
}

message Publication {
  reserved 1, 2, 3;
  bytes data = 4;
  ClientInfo info = 5;
  uint64 offset = 6;
  map<string, string> tags = 7;
}

message Join {
  ClientInfo info = 1;
}

message Leave {
  ClientInfo info = 1;
}

message Unsubscribe {
  reserved 1;
  uint32 code = 2;
  string reason = 3;
}

message Subscribe {
  bool recoverable = 1;
  reserved 2, 3;
  string epoch = 4;
  uint64 offset = 5;
  bool positioned = 6;
  bytes data = 7;
}

message Message {
  bytes data = 1;
}

message Connect {
  string client = 1;
  bytes data = 2;
  map<string, SubscribeResult> subs = 3;
  bool expires = 4;
  uint32 ttl = 5;
  uint32 ping = 6;
  bool pong = 7;
  string session = 8;
  string node = 9;
}

message Disconnect {
  uint32 code = 1;
  string reason = 2;
  bool reconnect = 3;
}

message Refresh {
  bool expires = 1;
  uint32 ttl = 2;
}

message ConnectRequest {
  string token = 1;
  bytes data = 2;
  map<string, SubscribeRequest> subs = 3;
  string name = 4;
}

message ConnectResult {
  string client = 1;
  bool expires = 2;
  uint32 ttl = 3;
  bytes data = 4;
  map<string, SubscribeResult> subs = 5;
  uint32 ping = 6;
  bool pong = 7;
  string session = 8;
  string node = 9;
}

message RefreshRequest {
  string token = 1;
}

message RefreshResult {
  string client = 1;
  string version = 2;
  bool expires = 3;
  uint32 ttl = 4;
}

message SubscribeRequest {
  string channel = 1;
  string token = 2;
  bool recover = 3;
  reserved 4, 5;
  string epoch = 6;
  uint64 offset = 7;
  bytes data = 8;
  bool positioned = 9;
  bool recoverable = 10;
  bool join_leave = 11;
}

message SubscribeResult {
  bool expires = 1;
  uint32 ttl = 2;
  bool recoverable = 3;
  reserved 4, 5;
  string epoch = 6;
  repeated Publication publications = 7;
  bool recovered = 8;
  uint64 offset = 9;
  bool positioned = 10;
  bytes data = 11;
  bool was_recovering = 12;
}

message SubRefreshRequest {
  string channel = 1;
  string token = 2;
}

message SubRefreshResult {
  bool expires = 1;
  uint32 ttl = 2;
}

message UnsubscribeRequest {
  string channel = 1;
}

message UnsubscribeResult {}

message PublishRequest {
  string channel = 1;
  bytes data = 2;
}

message PublishResult {}

message PresenceRequest {
  string channel = 1;
}

message PresenceResult {
  map<string, ClientInfo> presence = 1;
}

message PresenceStatsRequest {
  string channel = 1;
}

message PresenceStatsResult {
  uint32 num_clients = 1;
  uint32 num_users = 2;
}

message StreamPosition {
  uint64 offset = 1;
  string epoch = 2;
}

message PingRequest {}

message PingResult {}

message SendRequest{
  bytes data = 1;
}
