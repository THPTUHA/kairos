// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.20.3
// source: proto/deamon.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Deamon_DoneTask_FullMethodName  = "/proto.Deamon/DoneTask"
	Deamon_StartTask_FullMethodName = "/proto.Deamon/StartTask"
)

// DeamonClient is the client API for Deamon service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DeamonClient interface {
	DoneTask(ctx context.Context, in *DoneTaskRequest, opts ...grpc.CallOption) (*DoneTaskResponse, error)
	StartTask(ctx context.Context, in *StartTaskRequest, opts ...grpc.CallOption) (*StartTaskResponse, error)
}

type deamonClient struct {
	cc grpc.ClientConnInterface
}

func NewDeamonClient(cc grpc.ClientConnInterface) DeamonClient {
	return &deamonClient{cc}
}

func (c *deamonClient) DoneTask(ctx context.Context, in *DoneTaskRequest, opts ...grpc.CallOption) (*DoneTaskResponse, error) {
	out := new(DoneTaskResponse)
	err := c.cc.Invoke(ctx, Deamon_DoneTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deamonClient) StartTask(ctx context.Context, in *StartTaskRequest, opts ...grpc.CallOption) (*StartTaskResponse, error) {
	out := new(StartTaskResponse)
	err := c.cc.Invoke(ctx, Deamon_StartTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeamonServer is the server API for Deamon service.
// All implementations must embed UnimplementedDeamonServer
// for forward compatibility
type DeamonServer interface {
	DoneTask(context.Context, *DoneTaskRequest) (*DoneTaskResponse, error)
	StartTask(context.Context, *StartTaskRequest) (*StartTaskResponse, error)
	mustEmbedUnimplementedDeamonServer()
}

// UnimplementedDeamonServer must be embedded to have forward compatible implementations.
type UnimplementedDeamonServer struct {
}

func (UnimplementedDeamonServer) DoneTask(context.Context, *DoneTaskRequest) (*DoneTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoneTask not implemented")
}
func (UnimplementedDeamonServer) StartTask(context.Context, *StartTaskRequest) (*StartTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartTask not implemented")
}
func (UnimplementedDeamonServer) mustEmbedUnimplementedDeamonServer() {}

// UnsafeDeamonServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeamonServer will
// result in compilation errors.
type UnsafeDeamonServer interface {
	mustEmbedUnimplementedDeamonServer()
}

func RegisterDeamonServer(s grpc.ServiceRegistrar, srv DeamonServer) {
	s.RegisterService(&Deamon_ServiceDesc, srv)
}

func _Deamon_DoneTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DoneTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeamonServer).DoneTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Deamon_DoneTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeamonServer).DoneTask(ctx, req.(*DoneTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Deamon_StartTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeamonServer).StartTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Deamon_StartTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeamonServer).StartTask(ctx, req.(*StartTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Deamon_ServiceDesc is the grpc.ServiceDesc for Deamon service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Deamon_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Deamon",
	HandlerType: (*DeamonServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DoneTask",
			Handler:    _Deamon_DoneTask_Handler,
		},
		{
			MethodName: "StartTask",
			Handler:    _Deamon_StartTask_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/deamon.proto",
}
