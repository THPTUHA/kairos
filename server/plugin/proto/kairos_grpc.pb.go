// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.20.3
// source: proto/kairos.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Kairos_GetTask_FullMethodName              = "/proto.Kairos/GetTask"
	Kairos_ExecutionDone_FullMethodName        = "/proto.Kairos/ExecutionDone"
	Kairos_Leave_FullMethodName                = "/proto.Kairos/Leave"
	Kairos_SetTask_FullMethodName              = "/proto.Kairos/SetTask"
	Kairos_DeleteTask_FullMethodName           = "/proto.Kairos/DeleteTask"
	Kairos_RunTask_FullMethodName              = "/proto.Kairos/RunTask"
	Kairos_ToggleTask_FullMethodName           = "/proto.Kairos/ToggleTask"
	Kairos_RaftGetConfiguration_FullMethodName = "/proto.Kairos/RaftGetConfiguration"
	Kairos_RaftRemovePeerByID_FullMethodName   = "/proto.Kairos/RaftRemovePeerByID"
	Kairos_GetActiveExecutions_FullMethodName  = "/proto.Kairos/GetActiveExecutions"
	Kairos_SetExecution_FullMethodName         = "/proto.Kairos/SetExecution"
)

// KairosClient is the client API for Kairos service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KairosClient interface {
	GetTask(ctx context.Context, in *GetTaskRequest, opts ...grpc.CallOption) (*GetTaskResponse, error)
	ExecutionDone(ctx context.Context, in *ExecutionDoneRequest, opts ...grpc.CallOption) (*ExecutionDoneResponse, error)
	Leave(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SetTask(ctx context.Context, in *SetTaskRequest, opts ...grpc.CallOption) (*SetTaskResponse, error)
	DeleteTask(ctx context.Context, in *DeleteTaskRequest, opts ...grpc.CallOption) (*DeleteTaskResponse, error)
	RunTask(ctx context.Context, in *RunTaskRequest, opts ...grpc.CallOption) (*RunTaskResponse, error)
	ToggleTask(ctx context.Context, in *ToggleTaskRequest, opts ...grpc.CallOption) (*ToggleTaskResponse, error)
	RaftGetConfiguration(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*RaftGetConfigurationResponse, error)
	RaftRemovePeerByID(ctx context.Context, in *RaftRemovePeerByIDRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetActiveExecutions(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetActiveExecutionsResponse, error)
	SetExecution(ctx context.Context, in *Execution, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type kairosClient struct {
	cc grpc.ClientConnInterface
}

func NewKairosClient(cc grpc.ClientConnInterface) KairosClient {
	return &kairosClient{cc}
}

func (c *kairosClient) GetTask(ctx context.Context, in *GetTaskRequest, opts ...grpc.CallOption) (*GetTaskResponse, error) {
	out := new(GetTaskResponse)
	err := c.cc.Invoke(ctx, Kairos_GetTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kairosClient) ExecutionDone(ctx context.Context, in *ExecutionDoneRequest, opts ...grpc.CallOption) (*ExecutionDoneResponse, error) {
	out := new(ExecutionDoneResponse)
	err := c.cc.Invoke(ctx, Kairos_ExecutionDone_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kairosClient) Leave(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Kairos_Leave_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kairosClient) SetTask(ctx context.Context, in *SetTaskRequest, opts ...grpc.CallOption) (*SetTaskResponse, error) {
	out := new(SetTaskResponse)
	err := c.cc.Invoke(ctx, Kairos_SetTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kairosClient) DeleteTask(ctx context.Context, in *DeleteTaskRequest, opts ...grpc.CallOption) (*DeleteTaskResponse, error) {
	out := new(DeleteTaskResponse)
	err := c.cc.Invoke(ctx, Kairos_DeleteTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kairosClient) RunTask(ctx context.Context, in *RunTaskRequest, opts ...grpc.CallOption) (*RunTaskResponse, error) {
	out := new(RunTaskResponse)
	err := c.cc.Invoke(ctx, Kairos_RunTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kairosClient) ToggleTask(ctx context.Context, in *ToggleTaskRequest, opts ...grpc.CallOption) (*ToggleTaskResponse, error) {
	out := new(ToggleTaskResponse)
	err := c.cc.Invoke(ctx, Kairos_ToggleTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kairosClient) RaftGetConfiguration(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*RaftGetConfigurationResponse, error) {
	out := new(RaftGetConfigurationResponse)
	err := c.cc.Invoke(ctx, Kairos_RaftGetConfiguration_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kairosClient) RaftRemovePeerByID(ctx context.Context, in *RaftRemovePeerByIDRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Kairos_RaftRemovePeerByID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kairosClient) GetActiveExecutions(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetActiveExecutionsResponse, error) {
	out := new(GetActiveExecutionsResponse)
	err := c.cc.Invoke(ctx, Kairos_GetActiveExecutions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kairosClient) SetExecution(ctx context.Context, in *Execution, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Kairos_SetExecution_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KairosServer is the server API for Kairos service.
// All implementations must embed UnimplementedKairosServer
// for forward compatibility
type KairosServer interface {
	GetTask(context.Context, *GetTaskRequest) (*GetTaskResponse, error)
	ExecutionDone(context.Context, *ExecutionDoneRequest) (*ExecutionDoneResponse, error)
	Leave(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	SetTask(context.Context, *SetTaskRequest) (*SetTaskResponse, error)
	DeleteTask(context.Context, *DeleteTaskRequest) (*DeleteTaskResponse, error)
	RunTask(context.Context, *RunTaskRequest) (*RunTaskResponse, error)
	ToggleTask(context.Context, *ToggleTaskRequest) (*ToggleTaskResponse, error)
	RaftGetConfiguration(context.Context, *emptypb.Empty) (*RaftGetConfigurationResponse, error)
	RaftRemovePeerByID(context.Context, *RaftRemovePeerByIDRequest) (*emptypb.Empty, error)
	GetActiveExecutions(context.Context, *emptypb.Empty) (*GetActiveExecutionsResponse, error)
	SetExecution(context.Context, *Execution) (*emptypb.Empty, error)
	mustEmbedUnimplementedKairosServer()
}

// UnimplementedKairosServer must be embedded to have forward compatible implementations.
type UnimplementedKairosServer struct {
}

func (UnimplementedKairosServer) GetTask(context.Context, *GetTaskRequest) (*GetTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTask not implemented")
}
func (UnimplementedKairosServer) ExecutionDone(context.Context, *ExecutionDoneRequest) (*ExecutionDoneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecutionDone not implemented")
}
func (UnimplementedKairosServer) Leave(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Leave not implemented")
}
func (UnimplementedKairosServer) SetTask(context.Context, *SetTaskRequest) (*SetTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetTask not implemented")
}
func (UnimplementedKairosServer) DeleteTask(context.Context, *DeleteTaskRequest) (*DeleteTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTask not implemented")
}
func (UnimplementedKairosServer) RunTask(context.Context, *RunTaskRequest) (*RunTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunTask not implemented")
}
func (UnimplementedKairosServer) ToggleTask(context.Context, *ToggleTaskRequest) (*ToggleTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ToggleTask not implemented")
}
func (UnimplementedKairosServer) RaftGetConfiguration(context.Context, *emptypb.Empty) (*RaftGetConfigurationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RaftGetConfiguration not implemented")
}
func (UnimplementedKairosServer) RaftRemovePeerByID(context.Context, *RaftRemovePeerByIDRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RaftRemovePeerByID not implemented")
}
func (UnimplementedKairosServer) GetActiveExecutions(context.Context, *emptypb.Empty) (*GetActiveExecutionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActiveExecutions not implemented")
}
func (UnimplementedKairosServer) SetExecution(context.Context, *Execution) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetExecution not implemented")
}
func (UnimplementedKairosServer) mustEmbedUnimplementedKairosServer() {}

// UnsafeKairosServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KairosServer will
// result in compilation errors.
type UnsafeKairosServer interface {
	mustEmbedUnimplementedKairosServer()
}

func RegisterKairosServer(s grpc.ServiceRegistrar, srv KairosServer) {
	s.RegisterService(&Kairos_ServiceDesc, srv)
}

func _Kairos_GetTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KairosServer).GetTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Kairos_GetTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KairosServer).GetTask(ctx, req.(*GetTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kairos_ExecutionDone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecutionDoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KairosServer).ExecutionDone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Kairos_ExecutionDone_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KairosServer).ExecutionDone(ctx, req.(*ExecutionDoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kairos_Leave_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KairosServer).Leave(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Kairos_Leave_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KairosServer).Leave(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kairos_SetTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KairosServer).SetTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Kairos_SetTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KairosServer).SetTask(ctx, req.(*SetTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kairos_DeleteTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KairosServer).DeleteTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Kairos_DeleteTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KairosServer).DeleteTask(ctx, req.(*DeleteTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kairos_RunTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KairosServer).RunTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Kairos_RunTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KairosServer).RunTask(ctx, req.(*RunTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kairos_ToggleTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ToggleTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KairosServer).ToggleTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Kairos_ToggleTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KairosServer).ToggleTask(ctx, req.(*ToggleTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kairos_RaftGetConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KairosServer).RaftGetConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Kairos_RaftGetConfiguration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KairosServer).RaftGetConfiguration(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kairos_RaftRemovePeerByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RaftRemovePeerByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KairosServer).RaftRemovePeerByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Kairos_RaftRemovePeerByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KairosServer).RaftRemovePeerByID(ctx, req.(*RaftRemovePeerByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kairos_GetActiveExecutions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KairosServer).GetActiveExecutions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Kairos_GetActiveExecutions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KairosServer).GetActiveExecutions(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kairos_SetExecution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Execution)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KairosServer).SetExecution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Kairos_SetExecution_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KairosServer).SetExecution(ctx, req.(*Execution))
	}
	return interceptor(ctx, in, info, handler)
}

// Kairos_ServiceDesc is the grpc.ServiceDesc for Kairos service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Kairos_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Kairos",
	HandlerType: (*KairosServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTask",
			Handler:    _Kairos_GetTask_Handler,
		},
		{
			MethodName: "ExecutionDone",
			Handler:    _Kairos_ExecutionDone_Handler,
		},
		{
			MethodName: "Leave",
			Handler:    _Kairos_Leave_Handler,
		},
		{
			MethodName: "SetTask",
			Handler:    _Kairos_SetTask_Handler,
		},
		{
			MethodName: "DeleteTask",
			Handler:    _Kairos_DeleteTask_Handler,
		},
		{
			MethodName: "RunTask",
			Handler:    _Kairos_RunTask_Handler,
		},
		{
			MethodName: "ToggleTask",
			Handler:    _Kairos_ToggleTask_Handler,
		},
		{
			MethodName: "RaftGetConfiguration",
			Handler:    _Kairos_RaftGetConfiguration_Handler,
		},
		{
			MethodName: "RaftRemovePeerByID",
			Handler:    _Kairos_RaftRemovePeerByID_Handler,
		},
		{
			MethodName: "GetActiveExecutions",
			Handler:    _Kairos_GetActiveExecutions_Handler,
		},
		{
			MethodName: "SetExecution",
			Handler:    _Kairos_SetExecution_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/kairos.proto",
}

const (
	Agent_AgentRun_FullMethodName = "/proto.Agent/AgentRun"
)

// AgentClient is the client API for Agent service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AgentClient interface {
	AgentRun(ctx context.Context, in *AgentRunRequest, opts ...grpc.CallOption) (Agent_AgentRunClient, error)
}

type agentClient struct {
	cc grpc.ClientConnInterface
}

func NewAgentClient(cc grpc.ClientConnInterface) AgentClient {
	return &agentClient{cc}
}

func (c *agentClient) AgentRun(ctx context.Context, in *AgentRunRequest, opts ...grpc.CallOption) (Agent_AgentRunClient, error) {
	stream, err := c.cc.NewStream(ctx, &Agent_ServiceDesc.Streams[0], Agent_AgentRun_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &agentAgentRunClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Agent_AgentRunClient interface {
	Recv() (*AgentRunStream, error)
	grpc.ClientStream
}

type agentAgentRunClient struct {
	grpc.ClientStream
}

func (x *agentAgentRunClient) Recv() (*AgentRunStream, error) {
	m := new(AgentRunStream)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AgentServer is the server API for Agent service.
// All implementations must embed UnimplementedAgentServer
// for forward compatibility
type AgentServer interface {
	AgentRun(*AgentRunRequest, Agent_AgentRunServer) error
	mustEmbedUnimplementedAgentServer()
}

// UnimplementedAgentServer must be embedded to have forward compatible implementations.
type UnimplementedAgentServer struct {
}

func (UnimplementedAgentServer) AgentRun(*AgentRunRequest, Agent_AgentRunServer) error {
	return status.Errorf(codes.Unimplemented, "method AgentRun not implemented")
}
func (UnimplementedAgentServer) mustEmbedUnimplementedAgentServer() {}

// UnsafeAgentServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AgentServer will
// result in compilation errors.
type UnsafeAgentServer interface {
	mustEmbedUnimplementedAgentServer()
}

func RegisterAgentServer(s grpc.ServiceRegistrar, srv AgentServer) {
	s.RegisterService(&Agent_ServiceDesc, srv)
}

func _Agent_AgentRun_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(AgentRunRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AgentServer).AgentRun(m, &agentAgentRunServer{stream})
}

type Agent_AgentRunServer interface {
	Send(*AgentRunStream) error
	grpc.ServerStream
}

type agentAgentRunServer struct {
	grpc.ServerStream
}

func (x *agentAgentRunServer) Send(m *AgentRunStream) error {
	return x.ServerStream.SendMsg(m)
}

// Agent_ServiceDesc is the grpc.ServiceDesc for Agent service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Agent_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Agent",
	HandlerType: (*AgentServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AgentRun",
			Handler:       _Agent_AgentRun_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/kairos.proto",
}
