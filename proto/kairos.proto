
syntax = "proto3";

package proto;
option go_package = "github.com/THPTUHA/dkron/server/plugin/proto";

import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";

message Task {
    int64 id = 1;
    string key = 2;
    string timezone = 3;
    string schedule = 4;
    string owner_email = 5;
    int32 success_count = 6;
    int32 error_count = 7;
    bool disabled = 8;
    map<string, string> tags = 9;
    uint32 retries = 10;
    string executor = 11;
    map<string, string> executor_config = 12;
    string status = 13;
    map<string, string> metadata = 14;
    message NullableTime {
      bool has_value = 1;
      google.protobuf.Timestamp time = 2;
    }
    NullableTime last_success = 15;
    NullableTime last_error = 16;
    google.protobuf.Timestamp next = 17;
    string displayname = 18;
    map<string, PluginConfig> processors = 19;
    bool ephemeral = 20;
    NullableTime expires_at = 21;
}

message PluginConfig {
    map<string, string> config = 1;
}
  
message SetTaskRequest {
    Task task = 1;
}

message SetTaskResponse {
    Task task = 1;
}

message DeleteTaskRequest {
    int64 task_id = 1;
}

message DeleteTaskResponse{
    Task task = 1;
}

message GetTaskRequest {
    int64 task_id = 1;
}

message GetTaskResponse {
    Task task = 1;
}

message Execution {
    int64 task_id = 1;
    bool success = 2;
    bytes output = 3;
    string node_name = 4;
    int64 group = 5;
    uint32 attempt = 6;
    google.protobuf.Timestamp started_at = 7;
    google.protobuf.Timestamp finished_at = 8;
}

message ExecutionDoneRequest {
    Execution execution = 1;
}

message ExecutionDoneResponse {
    string from = 1;
    bytes payload = 2;
}

message RunTaskRequest {
    int64 task_id = 1;
}

message RunTaskResponse {
    Task task = 1;
}

message ToggleTaskRequest {
    int64 task_id = 1;
}

message ToggleTaskResponse {
    Task task = 1;
}

message RaftServer {
    string id = 1;
    string node = 2;
    string address = 3;
    bool leader = 4;
    bool voter = 5; 
    string raft_protocol = 6;
}

message RaftGetConfigurationResponse {
    repeated RaftServer servers = 1;
    uint64 index = 2;   
}

message RaftRemovePeerByIDRequest {
    string id = 1;
}

message AgentRunStream {
    Execution execution = 1;
}

message AgentRunResponse { 
    string from = 1;
    bytes payload = 2;
}

message GetActiveExecutionsResponse {
    repeated Execution executions = 1;
}

service Kairos {
    rpc GetTask (GetTaskRequest) returns (GetTaskResponse);
    rpc ExecutionDone (ExecutionDoneRequest) returns (ExecutionDoneResponse);
    rpc Leave (google.protobuf.Empty) returns (google.protobuf.Empty);
    rpc SetTask (SetTaskRequest) returns (SetTaskResponse);
    rpc DeleteTask (DeleteTaskRequest) returns (DeleteTaskResponse);
    rpc RunTask (RunTaskRequest) returns (RunTaskResponse);
    rpc ToggleTask (ToggleTaskRequest) returns (ToggleTaskResponse);
    rpc RaftGetConfiguration (google.protobuf.Empty) returns (RaftGetConfigurationResponse);
    rpc RaftRemovePeerByID (RaftRemovePeerByIDRequest) returns (google.protobuf.Empty);
    rpc GetActiveExecutions (google.protobuf.Empty) returns  (GetActiveExecutionsResponse);
    rpc SetExecution (Execution) returns (google.protobuf.Empty);
}

message AgentRunRequest {
    Task task = 1;
    Execution execution = 2;
}

service Agent {
    rpc AgentRun (AgentRunRequest) returns (stream AgentRunStream);
}
  